library(ggplot2)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method="lm")
source("C:/Users/noelm/Desktop/Saadhangal/STUDY STEFF/RSET/CLASSES/S5/ML/ML LAB/Expt3 - Scatter Plot in R/scatterplot.R")
library(ggplot2)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method="lm")
library(ggplot2)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(aes(color=factor(Species)))+
labs(title="Scatter Plot of Petal Length VS. Petal Width")
print(iris)
library(ggplot2)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method="lm")
library(ggplot2)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method="lm")
source("C:/Users/noelm/Desktop/Saadhangal/STUDY STEFF/RSET/CLASSES/S5/ML/ML LAB/Expt3 - Scatter Plot in R/scatterplot.R")
source("C:/Users/noelm/Desktop/Saadhangal/STUDY STEFF/RSET/CLASSES/S5/ML/ML LAB/Expt3 - Scatter Plot in R/scatterplot.R")
library(ggplot2)
ggplot(iris,aes(x=Petal.Length,y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method="lm")
library(ggplot2)
library(ggplot2)
ggplot(iris, aes(x=Petal.length, y=Petal.Width))
# Load the ggplot2 library
library(ggplot2)
# Create a scatter plot using ggplot
ggplot(iris, aes(x = Petal.Length, y = Petal.Width))
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+
geom_point(aes(shape=factor(Species)))
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(species)))
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method = "lm")
library(ggplot2)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method = "lm")
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method = "lm")
data("iris")
summary(iris)
data(iris)
summary(iris)
names(iris)
str(iris)
View(iris)
View(iris)
View(iris)
library(ggplot2)
ggplot(iris, aes(x=Petal.Length, y=Petal.Width))+
geom_point(aes(shape=factor(Species)))+
geom_point(aes(color=factor(Species)))+
geom_smooth(method = "lm")
data(iris) #load datasat
names(iris) #shows names of features
str(iris)
View(iris)
# Load the ggplot2 library
library(ggplot2)
# Load the Titanic dataset (a built-in dataset in R)
data(Titanic)
# Convert the Titanic dataset to a data frame
Titanic_df <- as.data.frame(Titanic)
# Create a histogram using ggplot
ggplot(Titanic_df, aes(x = Freq)) +
geom_histogram(color = "black", fill = "green", bins = 30)
View(Titanic_df)
# Load the ggplot2 library
library(ggplot2)
# Create a scatter plot using ggplot
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
# Add points to the plot, using the 'Species' variable for shape
geom_point(aes(shape = factor(Species))) +
# Add points to the plot, using the 'Species' variable for color
geom_point(aes(color = factor(Species))) +
# Add a linear regression line to the plot
geom_smooth(method = "lm")
library(ggplot2)
data(Titanic)
tit
tit = as.data.frame(Titanic)
tit
ggplot(tit, (aes(x=Freq)))
ggplot(tit, (aes(x=Survived )))
Freq
ggplot(tit, (aes(x=Freq))+
geom_histogram(color"black", fill="green", bins=30))
ggplot(tit, (aes(x=Freq))+
geom_histogram(color"black", fill="green", bins=30))
ggplot(tit, (aes(x=Freq))+
geom_histogram(color="black", fill="green", bins=30))
ggplot(tit, (aes(x=Freq))+
geom_histogram(color="black", fill="green", bins=30))
library(ggplot2)
data(Titanic)
tit = as.data.frame(Titanic)
ggplot(tit, (aes(x=Freq))+
geom_histogram(color="black", fill="green", bins=30))
library(ggplot2)
data(Titanic)
tit = as.data.frame(Titanic)
ggplot(tit, (aes(x=Freq))+
geom_histogram(color="black", fill="green", bins=30)
library(ggplot2)
library(ggplot2)
data(Titanic)
tit = as.data.frame(Titanic)
ggplot(tit, (aes(x=Freq))+
geom_histogram(color="black", fill="green", bins=30))
library(ggplot2)
data(Titanic)
tit = as.data.frame(Titanic)
ggplot(Titanic_df, aes(x = Freq)) +
geom_histogram(color = "black", fill = "green", bins = 30)
library(ggplot2)
data(Titanic)
tit = as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq))+
geom_histogram(color="black", fill="green", bins=30))
library(ggplot2)
data(Titanic)
tit = as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq))+
geom_histogram(color="black", fill="green", bins=30))
library(ggplot2)
data(Titanic)
tit <- as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq))+
geom_histogram(color="black", fill="green", bins=30))
library(ggplot2)
data(Titanic)
tit <- as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq)))+
geom_histogram(color="black", fill="green", bins=30)
View(iris)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram()
library(ggplot2)
data(Titanic)
tit <- as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq)))+
geom_histogram()
library(ggplot2)
data(Titanic)
tit <- as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq)))+
geom_histogram(color="black", fill="green", bins=30)
ggplot(tit, (aes(x = Freq)))+
geom_histogram(color="black", fill="green", )
library(ggplot2)
data(Titanic)
tit <- as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq)))+
geom_histogram(color="black", fill="green")
library(ggplot2)
data(Titanic)
tit <- as.data.frame(Titanic)
ggplot(tit, (aes(x = Freq)))+
geom_histogram(color="black", fill="green", bins=30)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=40)
source("C:/Users/noelm/Desktop/Saadhangal/STUDY STEFF/RSET/CLASSES/S5/ML/ML LAB/Internals Practice/histogram_ip.R")
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=50)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=60)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=30)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=20)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=20, count=10)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=20,)
iris_df = as.data.frame(iris)
ggplot(iris, aes(x = Sepal.Length)) +
geom_histogram(color="red", fill="black", bins=20,)
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("C:\\Users\\Student\\Documents\\ML LAB\\Expt5\\Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("C:\\Users\\Student\\Documents\\ML LAB\\Expt5\\Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("\Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("//Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("/Soybean.csv")
install.packages("class")
library(class)
data(iris)
set.seed(123)  # For reproducibility
sample_index <- sample(1:nrow(iris), 0.7 * nrow(iris))
train_data <- iris[sample_index, ]
test_data <- iris[-sample_index, ]
# Define the number of neighbors (k)
k <- 3
# Perform k-NN classification
predicted_species <- knn(train_data[, 1:4], test_data[, 1:4], train_data$Species, k)
# Compute accuracy
accuracy <- mean(predicted_species == test_data$Species)
cat("Accuracy:", accuracy)
install.packages("class")
library(class)
data(iris)
set.seed(123)  # For reproducibility
sample_index <- sample(1:nrow(iris), 0.7 * nrow(iris))
train_data <- iris[sample_index, ]
test_data <- iris[-sample_index, ]
# Define the number of neighbors (k)
k <- 3
# Perform k-NN classification
predicted_species <- knn(train_data[, 1:4], test_data[, 1:4], train_data$Species, k)
# Compute accuracy
accuracy <- mean(predicted_species == test_data$Species)
cat("Accuracy:", accuracy)
library(class)
data(iris)
# Optional: Scale features if necessary
# iris$Sepal.Length <- iris$Sepal.Length - mean(iris$Sepal.Length)
# iris$Sepal.Width <- iris$Sepal.Width - mean(iris$Sepal.Width)
# ... (repeat for other features)
# Split data into training and testing sets
set.seed(123)  # Set seed for reproducibility
train_index <- sample(1:nrow(iris), size=75)
train_data <- iris[train_index,]
test_data <- iris[-train_index,]
# Perform KNN classification
predicted_species <- knn(train_data[, -5], test_data[, -5], train_data$Species, k=1)
# Evaluate accuracy
confusion_matrix <- table(predicted_species, test_data$Species)
accuracy <- sum(diag(confusion_matrix)) / nrow(test_data)
print(confusion_matrix)
print(paste("Accuracy:",Â accuracy))
library(class)
data(iris)
# Optional: Scale features if necessary
# iris$Sepal.Length <- iris$Sepal.Length - mean(iris$Sepal.Length)
# iris$Sepal.Width <- iris$Sepal.Width - mean(iris$Sepal.Width)
# ... (repeat for other features)
# Split data into training and testing sets
set.seed(123)  # Set seed for reproducibility
train_index <- sample(1:nrow(iris), size=75)
train_data <- iris[train_index,]
test_data <- iris[-train_index,]
# Perform KNN classification
predicted_species <- knn(train_data[, -5], test_data[, -5], train_data$Species, k=1)
# Evaluate accuracy
confusion_matrix <- table(predicted_species, test_data$Species)
accuracy <- sum(diag(confusion_matrix)) / nrow(test_data)
print(confusion_matrix)
print(paste("Accuracy:",Â accuracy))
library(class)
data(iris)
# Optional: Scale features if necessary
# iris$Sepal.Length <- iris$Sepal.Length - mean(iris$Sepal.Length)
# iris$Sepal.Width <- iris$Sepal.Width - mean(iris$Sepal.Width)
# ... (repeat for other features)
# Split data into training and testing sets
set.seed(123)  # Set seed for reproducibility
train_index <- sample(1:nrow(iris), size=75)
train_data <- iris[train_index,]
test_data <- iris[-train_index,]
# Perform KNN classification
predicted_species <- knn(train_data[, -5], test_data[, -5], train_data$Species, k=1)
# Evaluate accuracy
confusion_matrix <- table(predicted_species, test_data$Species)
accuracy <- sum(diag(confusion_matrix)) / nrow(test_data)
print(confusion_matrix)
print(paste("Accuracy:",accuracy))
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("C:\\Users\\Student\\Documents\\ML LAB\\Expt5\\Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("C:\Users\noelm\Desktop\Saadhangal\STUDY STEFF\RSET\CLASSES\S5\ML\ML LAB\Expt5 - Preprocessing in R\Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("\Users\noelm\Desktop\Saadhangal\STUDY STEFF\RSET\CLASSES\S5\ML\ML LAB\Expt5 - Preprocessing in R\Soybean.csv")
#importing dataset
library(mlbench)
library(caret)
library(e1071)
dataset <- read.csv("\\Users\\noelm\\Desktop\\Saadhangal\\STUDY STEFF\\RSET\\CLASSES\\S5\\ML\\ML LAB\\Expt5 - Preprocessing in R\\Soybean.csv")
head(dataset, n = 50)
#Preprocessing
sum(is.na(dataset))
soybean <- na.omit(dataset)
soybean
preproc <- preProcess(soybean[, -1], method = c("center", "scale"))
preproc
soybean[, -1] <- predict(preproc, soybean[, -1])
set.seed(123)  # For reproducibility
splitIndex <- createDataPartition(soybean$Class, p = 0.8, list = FALSE)
training_data <- soybean[splitIndex, ]
testing_data <- soybean[-splitIndex, ]
training_data
testing_data
install.packages("mlbench")
install.packages("caret")
install.packages("ggplot2")
library(mlbench)
library(ggplot2)
library(caret)
soybean_df <- read.csv("D:\\S5\\ML\\exp5\\Soybean.csv")
install.packages("mlbench")
install.packages("caret")
install.packages("ggplot2")
library(mlbench)
library(ggplot2)
library(caret)
dataset <- read.csv("\\Users\\noelm\\Desktop\\Saadhangal\\STUDY STEFF\\RSET\\CLASSES\\S5\\ML\\ML LAB\\Expt5 - Preprocessing in R\\Soybean.csv")
nrow(soybean_df)
install.packages("mlbench")
install.packages("caret")
install.packages("ggplot2")
library(mlbench)
library(ggplot2)
library(caret)
soybean_df <- read.csv("\\Users\\noelm\\Desktop\\Saadhangal\\STUDY STEFF\\RSET\\CLASSES\\S5\\ML\\ML LAB\\Expt5 - Preprocessing in R\\Soybean.csv")
nrow(soybean_df)
head(soybean_df)
#number of missing value cells
sum(is.na(soybean_df))
#omit rows with NA value cells
soybean <- na.omit(soybean_df)
nrow(soybean)
head(soybean)
soybean
#normalization or scaling
preproc <- preProcess(soybean[, -1], method = c("center", "scale"))
soybean[, -1] <- predict(preproc, soybean[, -1])
set.seed(123)  # For reproducibility
#split 80% to training and 20% to test data
splitIndex <- createDataPartition(soybean$Class, p = 0.8, list = FALSE)
training_data <- soybean[splitIndex, ]
nrow(training_data)
head(training_data)
training_data
testing_data <- soybean[-splitIndex, ]
nrow(testing_data)
head(testing_data)
testing_data
